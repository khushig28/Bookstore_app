const asyncHandler = require("express-async-handler");
const Book = require("../models/contactModel");
//@desc Get all books
//@route GET /api/books
//@access private
const getBooks = asyncHandler(async (req, res) => {
  const books = await Book.find({ user_id: req.user.id });
  res.status(200).json(books);
});

//@desc Create New book
//@route POST /api/books
//@access private
const createBook = asyncHandler(async (req, res) => {
  console.log("The request body is :", req.body);
  const { name, description, authorName, bookCategory } = req.body; //destructuring
  if (!name || !description || !authorName) {
    res.status(400);
    throw new Error("All fields are mandatory !");
  }
  const book = await Book.create({
    name,
    description,
    authorName,
    bookCategory,
    user_id: req.user.id,
  });

  res.status(201).json(book);
});

//@desc Get book
//@route GET /api/books/:id
//@access private
const getBook = asyncHandler(async (req, res) => {
  const book = await Book.findById(req.params.id);
  if (!book) {
    res.status(404);
    throw new Error("Book not found");
  }
  res.status(200).json(book);
});

//@desc Update book
//@route PUT /api/books/:id
//@access private
const updateBook = asyncHandler(async (req, res) => {
  const book = await Book.findById(req.params.id);l
  if (!book) {
    res.status(404);
    throw new Error("Book not found");
  }

  if (contact.user_id.toString() !== req.user.id) {
    res.status(403);
    throw new Error("User don't have permission to update other user books");
  }

  const updatedBook = await Contact.findByIdAndUpdate(
    req.params.id,
    req.body,
    { new: true }
  );

  res.status(200).json(updateBook);
});

//@desc Delete book
//@route DELETE /api/books/:id
//@access private
const deleteBook = asyncHandler(async (req, res) => {
  const book = await Book.findById(req.params.id);
  if (!book) {
    res.status(404);
    throw new Error("Book not found");
  }
  if (book.user_id.toString() !== req.user.id) {
    res.status(403);
    throw new Error("User don't have permission to update other user books");
  }
  await Book.deleteOne({ _id: req.params.id });
  res.status(200).json(book);
});

module.exports = {
  getBooks,
  createBook,
  getBook,
  updateBook,
  deleteBook,
};